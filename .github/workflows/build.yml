# This workflow builds an Electron application for Windows, macOS, and Linux
# using electron-builder. It then uploads the build output for each OS
# as a separate zipped artifact.

name: Build Electron App

on:
  push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ] # a

jobs:
  build:
    # Use a matrix strategy to build on all three major platforms
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      # This action sets up a Node.js environment for use in actions
      uses: actions/setup-node@v5
      with:
        node-version: '22' # Use a long-term support (LTS) version of Node.js

    - name: Cache npm
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/package.json') }}

    - name: Install Dependencies (Unix/mac)
      if: runner.os != 'Windows'
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Install Dependencies (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        if (Test-Path package-lock.json) { npm ci } else { npm install }

    - name: Build the Application
      # This command runs the 'build' script from your package.json
      # Make sure your package.json has a build script that calls electron-builder.
      # Example package.json script:
      # "scripts": {
      #   "build": "electron-builder"
      # }
      run: npm run build
      
    - name: Upload Build Artifact
      # This action archives and uploads the build output.
      # electron-builder typically outputs to a 'dist' or 'release' folder.
      # The action will zip the contents of the specified path.
      uses: actions/upload-artifact@v4
      with:
        # The name of the artifact will include the OS for clarity.
        # e.g., "electron-app-windows-latest"
        name: electron-app-${{ matrix.os }}
        # Adjust the path if your electron-builder output directory is different.
        path: dist/

  fetch-external-artifacts:
    name: Fetch External Repo Artifacts
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts from external repo
        env:
          OWNER: ${{ secrets.EXTERNAL_OWNER }}
          REPO: ${{ secrets.EXTERNAL_REPO }}
          WORKFLOW_FILE: ${{ secrets.EXTERNAL_WORKFLOW }}
          TOKEN: ${{ secrets.EXTERNAL_PAT }}
        run: |
          set -e
          if [ -z "$OWNER" ] || [ -z "$REPO" ] || [ -z "$WORKFLOW_FILE" ] || [ -z "$TOKEN" ]; then
            echo "Missing required secrets: EXTERNAL_OWNER, EXTERNAL_REPO, EXTERNAL_WORKFLOW, EXTERNAL_PAT"
            echo "Set these in the repository secrets to enable cross-repo artifact download."
            exit 1
          fi

          mkdir -p external_artifacts

          # Find the most recent successful run for the specified workflow
          echo "Querying workflow runs for $OWNER/$REPO workflow $WORKFLOW_FILE"
          runs_json=$(curl -s -H "Authorization: token $TOKEN" "https://api.github.com/repos/$OWNER/$REPO/actions/workflows/$WORKFLOW_FILE/runs?status=success&per_page=5")
          run_id=$(echo "$runs_json" | jq -r '.workflow_runs[0].id')
          if [ -z "$run_id" ] || [ "$run_id" = "null" ]; then
            echo "No successful workflow runs found for $WORKFLOW_FILE"
            exit 1
          fi

          echo "Found run id: $run_id"

          artifacts_json=$(curl -s -H "Authorization: token $TOKEN" "https://api.github.com/repos/$OWNER/$REPO/actions/runs/$run_id/artifacts")
          echo "$artifacts_json" | jq -c '.artifacts[]' | while read -r art; do
            name=$(echo "$art" | jq -r '.name')
            id=$(echo "$art" | jq -r '.id')
            echo "Found artifact: $name (id=$id)"
            url="https://api.github.com/repos/$OWNER/$REPO/actions/artifacts/$id/zip"
            out="external_artifacts/${name}.zip"
            echo "Downloading $name to $out"
            curl -sL -H "Authorization: token $TOKEN" -o "$out" "$url"
            mkdir -p "external_artifacts/$name"
            unzip -q "$out" -d "external_artifacts/$name" || true
          done
